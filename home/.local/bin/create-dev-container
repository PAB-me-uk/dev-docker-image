#!/bin/bash
set -e

if [[ $# -lt 3 ]]; then
    echo "$0: Three arguments are required: name for the new container, name of volume to mount, and python version (e.g. 3.6)"
    echo "After the initial three arguments you can optionally provide a list of extra directories (relative to you wsl home dir) to mount in the home directory of the container"
    echo "This builds the image, creates volume if it does not exist, then creates and runs container removing any existing container with same name"
    exit 4
fi

home_mounts=("${@:4}")
home_mounts+=('.ssh' '.aws')
home_mount_arguments=""
echo Home directory mounts are: ${home_mounts[*]}
for mount in "${home_mounts[@]}"; do
  home_mount_arguments+=" --mount type=bind,source=${HOST_USER_HOME}/${mount},target=/home/dev/${mount}"
done

echo Deleting any existing container with name: $1
sudo docker container rm -f $1 2> /dev/null 1> /dev/null || true
mkdir -p ~/.ssh
mkdir -p ~/.aws

if [[ -z "${NO_PULL}" ]]; then
  echo Getting latest image
  sudo docker pull pabuk/dev-python:$3
fi

echo Creating container with name: $1

command="docker container run -d
  --name $1 \
  --mount type=volume,source=$2,target=${IMAGE_WORKSPACE_DIR} \
  --mount type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock \
  ${home_mount_arguments} \
  --env HOST_USER_HOME=${HOST_USER_HOME} \
  pabuk/dev-python:$3"
echo Command: $command
eval sudo $command
echo Container created with name: $1

# Check if .zsh-extra is in home_mounts
found=0
for mount in "${home_mounts[@]}"; do
    if [[ $mount == ".zsh-extra" ]]; then
        found=1
        break
    fi
done

# If .zsh-extra is not in home_mounts, and if the .zsh-extra directory exists, copy it to the new container
if [[ $found -eq 0 ]] && [[ -d ${HOME}/.zsh-extra ]]; then
  sudo docker cp ${HOME}/.zsh-extra $1:${HOME}/
  echo Copied ${HOME}/.zsh-extra to new container
fi
